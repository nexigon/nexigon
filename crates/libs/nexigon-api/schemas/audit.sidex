//! Actions and types related to the audit log.

import actor::Actor
import datetime::Timestamp
import jobs::JobId
import json::JsonValue

/// Unique ID of an audit log action.
#[rust(type = "nexigon_ids::ids::AuditLogActionId")]
#[json(type = "string")]
opaque AuditLogActionId

/// Unique ID of an audit log event.
#[rust(type = "nexigon_ids::ids::AuditLogEventId")]
#[json(type = "string")]
opaque AuditLogEventId

/// Event recorded in the audit log.
/// 
/// Audit data is guaranteed to not contain any secret information.
record AuditLogEvent {
    /// ID of the audit log event.
    event_id: AuditLogEventId,
    /// Actor causing the event.
    actor: Actor,
    /// Type of the event that was recorded.
    event: string,
    /// Additional audit data associated with the event.
    data: JsonValue,
    /// Timestamp indicating when the audit log event was recorded.
    created_at: Timestamp,
    /// Action the event has been caused by (if any).
    action?: AuditLogEventAction,
    /// Job the event has been caused by (if any).
    job?: AuditLogEventJob,
}

/// Action that caused an event.
record AuditLogEventAction {
    /// ID of the action.
    action_id: AuditLogActionId,
}

/// Job that caused an event.
record AuditLogEventJob {
    /// ID of the job.
    job_id: JobId,
}

/// Action recorded in the audit log.
/// 
/// Audit data is guaranteed to not contain any secret information.
record AuditLogAction {
    /// ID of the audit log action.
    action_id: AuditLogActionId,
    /// Actor that performed the action.
    actor: Actor,
    /// Type of the action that was performed.
    action: string,
    /// Additional audit data associated with the action.
    data: [string: JsonValue],
    /// Status associated with the action
    status: AuditLogActionStatus,
    /// Timestamp indicating when the audit log action was recorded.
    created_at: Timestamp,
}

/// Status associated with an audit log action.
#[json(tagged = externally)]
variant AuditLogActionStatus {
    /// Action got rejected (failed precondition check).
    Rejected,
    /// Action or precondition check panicked (e.g., due to a bug).
    Panicked,
    /// Action was executed successfully.
    Succeeded,
    /// Action execution failed (e.g., due to missing permissions).
    Failed,
    /// Action is being executed.
    Pending,
}

/// Query the events recorded in the audit log.
/// 
/// Requires administrator permissions.
record QueryAuditLogEventsAction { }

/// Output of querying the events recorded in the audit log.
record QueryAuditLogEventsOutput {
    /// List of audit events.
    events: [AuditLogEvent],
}

/// Query the actions recorded in the audit log.
/// 
/// Requires administrator permissions.
record QueryAuditLogActionsAction { }

/// Output of querying the actions recorded in the audit log.
record QueryAuditLogActionsOutput {
    /// List of actions.
    actions: [AuditLogAction],
}
